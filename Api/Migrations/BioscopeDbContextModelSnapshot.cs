// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlantAnimalApi.Data;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(BioscopeDbContext))]
    partial class BioscopeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlantAnimalApi.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DiscoveryId")
                        .HasColumnType("uuid")
                        .HasColumnName("discovery_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("DiscoveryId", "CreatedAt")
                        .HasDatabaseName("ix_comments_discovery_id_created_at");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_comments_user_id_created_at");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("PlantAnimalApi.Models.Discovery", b =>
                {
                    b.Property<Guid>("DiscoveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("discovery_id");

                    b.Property<string>("AssetUrl")
                        .HasColumnType("text")
                        .HasColumnName("asset_url");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("common_name");

                    b.Property<decimal?>("Confidence")
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("confidence");

                    b.Property<string>("ScientificName")
                        .HasColumnType("text")
                        .HasColumnName("scientific_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("WikiDescription")
                        .HasColumnType("text")
                        .HasColumnName("wiki_description");

                    b.HasKey("DiscoveryId")
                        .HasName("pk_discoveries");

                    b.HasIndex("AssetUrl")
                        .HasDatabaseName("ix_discoveries_asset_url");

                    b.HasIndex("CommonName")
                        .HasDatabaseName("ix_discoveries_common_name");

                    b.HasIndex("ScientificName")
                        .HasDatabaseName("ix_discoveries_scientific_name");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_discoveries_user_id");

                    b.ToTable("discoveries", (string)null);
                });

            modelBuilder.Entity("PlantAnimalApi.Models.MediaAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DiscoveryId")
                        .HasColumnType("uuid")
                        .HasColumnName("discovery_id");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_bytes");

                    b.Property<string>("ThumbUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumb_url");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_media_assets");

                    b.HasIndex("DiscoveryId")
                        .HasDatabaseName("ix_media_assets_discovery_id");

                    b.ToTable("media_assets", (string)null);
                });

            modelBuilder.Entity("PlantAnimalApi.Models.Reaction", b =>
                {
                    b.Property<Guid>("DiscoveryId")
                        .HasColumnType("uuid")
                        .HasColumnName("discovery_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ReactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("reaction_id");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.HasKey("DiscoveryId", "UserId")
                        .HasName("pk_reactions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reactions_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_reactions_user_id1");

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("PlantAnimalApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_users_created_at");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PlantAnimalApi.Models.Comment", b =>
                {
                    b.HasOne("PlantAnimalApi.Models.Discovery", "Discovery")
                        .WithMany("Comments")
                        .HasForeignKey("DiscoveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_discoveries_discovery_id");

                    b.HasOne("PlantAnimalApi.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("Discovery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlantAnimalApi.Models.Discovery", b =>
                {
                    b.HasOne("PlantAnimalApi.Models.User", "User")
                        .WithMany("Discoveries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discoveries_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlantAnimalApi.Models.MediaAsset", b =>
                {
                    b.HasOne("PlantAnimalApi.Models.Discovery", "Discovery")
                        .WithMany()
                        .HasForeignKey("DiscoveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_assets_discoveries_discovery_id");

                    b.Navigation("Discovery");
                });

            modelBuilder.Entity("PlantAnimalApi.Models.Reaction", b =>
                {
                    b.HasOne("PlantAnimalApi.Models.Discovery", "Discovery")
                        .WithMany("Reactions")
                        .HasForeignKey("DiscoveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_discoveries_discovery_id");

                    b.HasOne("PlantAnimalApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_users_user_id");

                    b.HasOne("PlantAnimalApi.Models.User", null)
                        .WithMany("Reactions")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_reactions_users_user_id1");

                    b.Navigation("Discovery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlantAnimalApi.Models.Discovery", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("PlantAnimalApi.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Discoveries");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
